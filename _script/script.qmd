---
title: "Laura Acevedo"
---

# Pré-processamento

```{r}
#| label: load packages
library(tidyverse)
library(readxl)
library(summarytools)
library(usethis)
library(janitor)
library(gtsummary)
library(modelsummary)
```

```{r}
#| label: load data
df <- read_excel("data_private/planilha_oficial_baseline_forms.xlsx", 
    sheet = "09-01-2025", na = c("-")) |> 
     clean_names()
```

```{r}
#| label: coding variables
df_aux <- df |> 
     mutate(
     escolaridade_rec = case_when(
          escolaridade == 1 ~ "Não frequentou escola",
          escolaridade == 2 ~ "Ensino Fundamental",
          escolaridade == 3 ~ "Ensino Médio",
          escolaridade == 4 ~ "Ensino Técnico",
          escolaridade == 5 ~ "Graduação - Tecnólogo",
          escolaridade == 6 ~ "Graduação - Normal",
          escolaridade == 7 ~ "Pós-graduação",
          TRUE ~ as.character(escolaridade)),
     escolaridade_rec = escolaridade_rec |>
          fct_relevel(
          "Não frequentou escola",
          "Ensino Fundamental",
          "Ensino Médio",
          "Ensino Técnico",
          "Graduação - Tecnólogo",
          "Graduação - Normal",
          "Pós-graduação"
          ),
     idade_cat_rec = case_when(
          idade < 30 ~ "Menos de 30",
          idade >= 30 & idade < 50 ~ "30-49",
          idade >= 50 ~ "50 ou mais"),
     sexo_rec = case_when(
          gender == "F" ~ "Feminino",
          gender == "M" ~ "Masculino",
          TRUE ~ NA_character_),
     estado_civil_rec = case_when(
          pmarry == 1  ~ "Casada",
          pmarry == 2  ~ "União conjugal estável (informal / não no papel)",
          pmarry == 3  ~ "Solteira",
          pmarry == 4  ~ "Separada",
          pmarry == 5  ~ "Desquitada ou Divorciada",
          pmarry == 6  ~ "Viúva",
          pmarry == 99 ~ NA_character_,
          TRUE         ~ NA_character_),
     raca_rec = case_when(
          race == 1  ~ "Preta",
          race == 2  ~ "Parda",
          race == 3  ~ "Branca",
          race == 4  ~ "Amarela",
          race == 5  ~ "Indígena",
          race == 6  ~ "Outros",
          race == 99 ~ NA_character_,
          TRUE ~ as.character(race)),
    raca_rec = raca_rec |>
          fct_relevel("Preta", "Parda", "Branca", "Amarela", "Indígena", "Outros"),
     tipo_moradia_rec = case_when(
          housetype1 == "1.0"  ~ "Cedido",
          housetype1 == "2.0"  ~ "Alugado",
          housetype1 == "3.0"  ~ "Próprio quitado",
          housetype1 == "4.0"  ~ "Próprio pagando",
          housetype1 == "5.0"  ~ "Outros",
          housetype1 == "99.0" ~ NA_character_,
          # TRUE                 ~ housetype1 #para ver as respostas
          !is.na(housetype1)   ~ "Outros (especificado)"
    ),
     situacao_ocupacional_rec = case_when(
          se1 == "1.0" ~ "Empregada",
          se1 == "2.0" ~ "Autônoma",
          se1 == "3.0" ~ "Desempregada",
          se1 == "4.0" ~ "Estudante",
          se1 == "5.0" ~ "Dona de casa",
          se1 == "6.0" ~ "Aposentada",
          se1 == "7.0" ~ "Outro (especificado)",
          !is.na(se1)  ~ "Outro (especificado)",
      TRUE         ~ NA_character_),
    renda_rec = case_when(
          income1 == 0 ~ "Nenhuma renda (R$ 0)",
          income1 == 1  ~ "Nenhuma renda (R$ 0)",
          income1 == 2  ~ "Até 1 salário mínimo (< R$ 1.412,00)",
          income1 == 3  ~ "Até 2 salários mínimos (≤ R$ 2.824,00)",
          income1 == 4  ~ "Até 3 salários mínimos (≤ R$ 4.236,00)",
          income1 == 5  ~ "Até 4 salários mínimos (≤ R$ 5.648,00)",
          income1 == 6  ~ "Até 5 salários mínimos (≤ R$ 7.060,00)",
          income1 == 7  ~ "Até 6 salários mínimos (≤ R$ 8.472,00)",
          income1 == 8  ~ "Até 7 salários mínimos (≤ R$ 9.884,00)",
          income1 == 9  ~ "Até 8 salários mínimos (≤ R$ 11.296,00)",
          income1 == 10 ~ "Até 9 salários mínimos (≤ R$ 12.708,00)",
          income1 == 11 ~ "Até 10 salários mínimos (≤ R$ 14.120,00)",
          income1 == 12 ~ "Mais que 10 salários mínimos (> R$ 14.120,00)",
      TRUE          ~ as.character(income1)),
    renda_rec = renda_rec |>
         fct_relevel(
        "Nenhuma renda (R$ 0)",
        "Até 1 salário mínimo (< R$ 1.412,00)",
        "Até 2 salários mínimos (≤ R$ 2.824,00)",
        "Até 3 salários mínimos (≤ R$ 4.236,00)",
        "Até 4 salários mínimos (≤ R$ 5.648,00)",
        "Até 5 salários mínimos (≤ R$ 7.060,00)",
        "Até 6 salários mínimos (≤ R$ 8.472,00)",
        "Até 7 salários mínimos (≤ R$ 9.884,00)",
        "Até 8 salários mínimos (≤ R$ 11.296,00)",
        "Até 9 salários mínimos (≤ R$ 12.708,00)",
        "Até 10 salários mínimos (≤ R$ 14.120,00)",
        "Mais que 10 salários mínimos (> R$ 14.120,00)"
      ),
    suporte_social_rec = case_when(
         ss1 == 1 ~ "Sim",
         ss1 == 0 ~ "Não"),
    suporte_social2_rec = case_when(
         ss2 == 1 ~ "Sim",
         ss2 == 0 ~ "Não"),
    phq9_cat_rec = case_when(
         score_phq >= 0 & score_phq <= 4  ~ "Nenhum/Leve",
         score_phq >= 5 & score_phq <= 9  ~ "Leve",
         score_phq >= 10 & score_phq <= 14 ~ "Moderado",
         score_phq >= 15 & score_phq <= 19 ~ "Moderadamente Grave",
         score_phq >= 20 & score_phq <= 27 ~ "Grave"),
    gad7_cat_rec = case_when(
         score_gad >= 0 & score_gad <= 4  ~ "Mínimo",
         score_gad >= 5 & score_gad <= 9  ~ "Leve",
         score_gad >= 10 & score_gad <= 14 ~ "Moderado",
         score_gad >= 15 & score_gad <= 21 ~ "Grave"),
    igi_cat_rec = case_when(
         score_igi >= 0 & score_igi <= 10  ~ "Nenhum/Leve",
         score_igi >= 11 & score_igi <= 14 ~ "Leve",
         score_igi >= 15 & score_igi <= 21 ~ "Moderado",
         score_igi >= 22 & score_igi <= 28 ~ "Grave"),
    phq9_cat_rec = phq9_cat_rec |> 
         fct_relevel("Nenhum/Leve", "Leve", "Moderado", "Moderadamente Grave", "Grave"), 
    gad7_cat_rec = gad7_cat_rec |> 
         fct_relevel("Mínimo", "Leve", "Moderado", "Grave"), 
    igi_cat_rec = igi_cat_rec |>
      fct_relevel("Nenhum/Leve", "Leve", "Moderado", "Grave"),
    alcool = case_when(
         audit1 == 0 ~ "Uma vez por mês ou menos",
         audit1 == 1 ~ "Uma vez por mês ou menos",
         audit1 == 2 ~ "Uma vez por mês ou menos",
         audit1 >= 3 ~ "Duas a quatro vezes por mês"), 
     alcool = alcool |> 
          fct_relevel("Uma vez por mês ou menos", "Duas a quatro vezes por mês"),
    tabaco = case_when(
         tabacco3 == 0 ~ "Não",
         tabacco3 == 1 ~ "Sim"),
    tratamento_emocional_hist = case_when(
         ms1 == 1 ~ "Sim",
         ms1 == 0 ~ "Não"
    ),
    tratamento_emocional_atual = case_when(
         psychtr == 1 ~ "Sim",
         psychtr == 0 ~ "Não"
    ),
    medicamento_emocional_atual = case_when(
         ms4 == 1 ~ "Sim",
         ms4 == 0 ~ "Não"
    )
    )

# df_aux |> 
#      select(tratamento_emocional_hist, ms1,
#             tratamento_emocional_atual, psychtr,
#             medicamento_emocional_atual, ms4
#             ) |> dfSummary() |> stview()
```

```{r}
#| label: recoding variables

df_aux <- df_aux |> 
     mutate(
     escolaridade_rec2 = fct_collapse(
          escolaridade_rec,
          "Graduação" = c("Graduação - Tecnólogo","Graduação - Normal")),
     estado_civil_rec2 = fct_collapse(
          estado_civil_rec,
          "Possui parceiro" = c("Casada",
                                "União conjugal estável (informal / não no papel)"),
          "Não possui parceiro" = c("Solteira",
                                    "Desquitada ou Divorciada",
                                    "Separada")),
     tipo_moradia_rec2 = fct_collapse(
          tipo_moradia_rec,
          "Próprio" = c("Próprio quitado", "Próprio pagando", "Cedido"),
          "Alugado" = "Alugado",
          "Outros" = "Outros (especificado)"),
     situacao_ocupacional_rec2 = fct_collapse(
          situacao_ocupacional_rec,
          "Remunerado" = c("Empregada", "Autônoma"),
          "Não remunerado" = c("Desempregada", 
                               "Dona de casa", 
                               "Estudante", 
                               "Outro (especificado)")),
    renda_rec2 = fct_collapse(
         renda_rec,
         "Nenhuma renda" = "Nenhuma renda (R$ 0)",
         "Até 1 salário mínimo" = "Até 1 salário mínimo (< R$ 1.412,00)",
         "2 salários mínimos ou mais" = c(
              "Até 2 salários mínimos (≤ R$ 2.824,00)",
              "Até 3 salários mínimos (≤ R$ 4.236,00)",
              "Até 4 salários mínimos (≤ R$ 5.648,00)"
      )
    ),
    renda_rec2 = fct_relevel(renda_rec2,
                             "Nenhuma renda",
                             "Até 1 salário mínimo",
                             "2 salários mínimos ou mais"))
```

```{r}
#| label: escrevendo o banco em .RDS sem NA's 

# Quem não respondeu escolaridade (por exemplo) não respondeu: estado civil, raça, tipo_moradia, situação ocupacional, renda, ss1, ss2 etc

df_final <- df_aux |> 
     filter(!is.na(escolaridade_rec)) # |> 
     #dfSummary(round.digits = 2) |> 
     #stview()
saveRDS(df_final, file = "data_private/df_final.RDS")
```

```         
#| label: problemas com o banco em labels

label(df_aux$income1) <- "Essa variável parece ter um problema, visto que não deveria ser possível a categoria 0"
label(df_aux$renda_rec) <- "Respondentes da categoria 0 foram transformados em Nenhuma Renda"
label(df_aux$housetype1) <-  "Definir melhor as categorias (?) se necessário, parece estar com resposta aberta"
label(df_aux$tipo_moradia_rec) <- "Coloquei essas categorias em Outros (especificado)"
label(df_aux$se1) <- "Mesma situação da housetype"
```

```{r}
#| label: conferindo as transformações no banco

df_aux_select <- df_aux |> select(
                 risk,
                 escolaridade, escolaridade_rec, 
                 gender, sexo_rec,
                 pmarry, estado_civil_rec,
                 race, raca_rec,
                 housetype1, tipo_moradia_rec,
                 se1,situacao_ocupacional_rec,
                 income1, renda_rec,
                 ss1, suporte_social_rec,
                 ss2, suporte_social2_rec, 
                 score_phq, phq9_cat_rec, status_phq,
                 score_gad, gad7_cat_rec, status_gad, 
                 score_igi, igi_cat_rec, status_igi
                 ) 
     
df_aux_select |> 
     dfSummary(round.digits = 2, labels.col = TRUE ) |> 
     stview()
```

```         
#| label: Stata -> Tidyverse

# Análises descritivas por jornada
df |> group_by(StatusJornadaDepressao) |> summarise(media_PHQ = mean(ScorePHQ, na.rm = TRUE))
df |> group_by(StatusJornadaAnsiedade) |> summarise(media_GAD = mean(ScoreGAD, na.rm = TRUE))
df |> group_by(StatusJornadaInsonia) |> summarise(media_IGI = mean(ScoreIGI, na.rm = TRUE))

# Criar a variável any_two_conditions
df <- df |>
  mutate(
    any_two_conditions = if_else(
      rowSums(cbind(ScoreIGI <= 10, ScorePHQ <= 9, ScoreGAD <= 9), na.rm = TRUE) == 2,
      1, 0
    )
  )

# Tabelas de engajamento
# PHQ-9
df |> count(phq9_level, StatusJornadaDepressao) |> tidyr::pivot_wider(names_from = StatusJornadaDepressao, values_from = n, values_fill = 0)

# GAD-7
df |> count(gad7_level, StatusJornadaAnsiedade) |> tidyr::pivot_wider(names_from = StatusJornadaAnsiedade, values_from = n, values_fill = 0)

# IGI
df |> count(igi_level, StatusJornadaInsonia) |> tidyr::pivot_wider(names_from = StatusJornadaInsonia, values_from = n, values_fill = 0)

# Médias por status
df |> group_by(StatusJornadaDepressao) |> summarise(media_PHQ = mean(ScorePHQ, na.rm = TRUE))
df |> group_by(StatusJornadaAnsiedade) |> summarise(media_GAD = mean(ScoreGAD, na.rm = TRUE))
df |> group_by(StatusJornadaInsonia) |> summarise(media_IGI = mean(ScoreIGI, na.rm = TRUE))

# Gráficos de barras
# PHQ-9
df |>
  ggplot(aes(x = phq9_level, fill = StatusJornadaDepressao)) +
  geom_bar(position = "dodge") +
  labs(title = "Engajamento por Nível de PHQ-9", x = "Nível PHQ-9", y = "Contagem")

# GAD-7
df |>
  ggplot(aes(x = gad7_level, fill = StatusJornadaAnsiedade)) +
  geom_bar(position = "dodge") +
  labs(title = "Engajamento por Nível de GAD-7", x = "Nível GAD-7", y = "Contagem")

# IGI
df |>
  ggplot(aes(x = igi_level, fill = StatusJornadaInsonia)) +
  geom_bar(position = "dodge") +
  labs(title = "Engajamento por Nível de IGI", x = "Nível IGI", y = "Contagem")

# Tabelas cruzadas por gênero
df |> count(Gender, StatusJornadaAnsiedade) |> tidyr::pivot_wider(names_from = StatusJornadaAnsiedade, values_from = n, values_fill = 0)
df |> count(Gender, StatusJornadaInsonia)   |> tidyr::pivot_wider(names_from = StatusJornadaInsonia, values_from = n, values_fill = 0)
df |> count(Gender, StatusJornadaDepressao) |> tidyr::pivot_wider(names_from = StatusJornadaDepressao, values_from = n, values_fill = 0)
```
